name: Rotate Repo Keys

on:
  schedule:
    # https://crontab.guru/every-year
    - cron: '0 0 1 1 *'
  workflow_dispatch:
    environment:
        description: 'Environment to run tests against'
        type: environment
        default: 'dev'
        required: true
  push:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  generate-key:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment || 'dev' }}
    steps:
      - uses: step-security/harden-runner@v2
        with:
            egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs
      - uses: actions/checkout@v3
      # $() must be in "double quotations" or else it won't process first
      - name: Generate temp directory for gnupg
        run: echo "GNUPGHOME=$(mktemp -d)" >> "$GITHUB_ENV"
      # https://www.gnupg.org/documentation/manuals/gnupg/Unattended-GPG-key-generation.html
      - name: GPG config
        run: |
          cat > gpgbatchconfig <<EOF
            %echo Generating a basic OpenPGP key
            Key-Type: EDDSA
            Key-Curve: ed25519
            Subkey-Type: ECDH
            Subkey-Curve: cv25519
            Name-Real: ${{ github.repository_owner }}
            Name-Email: ${{ github.repository_owner_id }}+${{ github.repository_owner }}@users.noreply.github.com
            Expire-Date: ${{ vars.GNUPG_KEY_EXPIRE }}
            %commit
            %echo done
          EOF
      - name: Generate GPG signing key
        run: gpg --batch --pinentry-mode=loopback --passphrase "${{ secrets.GNUPG_KEY_PASSPHRASE }}" --full-gen-key gpgbatchconfig
      - name: Export private key
        run: gpg --batch --pinentry-mode=loopback --passphrase "${{ secrets.GNUPG_KEY_PASSPHRASE }}" --output gpg-private-key.asc --armor --export-secret-keys "${{ github.repository_owner_id }}+${{ github.repository_owner }}@users.noreply.github.com"
      - run: cat gpg-private-key.asc
      - name: Upload private key to secrets
        run: gh secret set GNUPG_KEY_PRIVATE --env ${{ inputs.environment || 'dev' }} < gpg-private-key.asc
        env:
          GH_TOKEN: ${{ github.token }}